// <auto-generated />
using System;
using HealthcareBookings.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HealthcareBookings.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250829123634_InitialScheme")]
    partial class InitialScheme
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HealthcareBookings.Domain.Entities.Appointment", b =>
                {
                    b.Property<string>("AppointmetnID")
                        .HasColumnType("text");

                    b.Property<string>("DoctorID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PatientID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TimeSlotID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AppointmetnID");

                    b.HasAlternateKey("TimeSlotID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("HealthcareBookings.Domain.Entities.AppointmentReview", b =>
                {
                    b.Property<string>("AppointmentID")
                        .HasColumnType("text");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AppointmentID");

                    b.ToTable("AppointmentReview");
                });

            modelBuilder.Entity("HealthcareBookings.Domain.Entities.Clinic", b =>
                {
                    b.Property<string>("ClinicID")
                        .HasColumnType("text");

                    b.Property<string>("ClinicDescription")
                        .HasColumnType("text");

                    b.Property<string>("ClinicName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ClinicID");

                    b.ToTable("Clinic");
                });

            modelBuilder.Entity("HealthcareBookings.Domain.Entities.ClinicAdmin", b =>
                {
                    b.Property<string>("ClinicAdminUID")
                        .HasColumnType("text");

                    b.Property<string>("AdminUserId")
                        .HasColumnType("text");

                    b.Property<string>("ClinicID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ClinicAdminUID");

                    b.HasAlternateKey("ClinicID");

                    b.HasIndex("AdminUserId");

                    b.ToTable("ClinicAdmins");
                });

            modelBuilder.Entity("HealthcareBookings.Domain.Entities.Doctor", b =>
                {
                    b.Property<string>("DoctorUID")
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("CategoryID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClinicID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DoctorUserId")
                        .HasColumnType("text");

                    b.Property<int>("ExperienceYears")
                        .HasColumnType("integer");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.HasKey("DoctorUID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("ClinicID");

                    b.HasIndex("DoctorUserId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("HealthcareBookings.Domain.Entities.DoctorCategory", b =>
                {
                    b.Property<string>("CategoryID")
                        .HasColumnType("text");

                    b.Property<string>("CategoryDescription")
                        .HasColumnType("text");

                    b.Property<string>("CategoryLogoPath")
                        .HasColumnType("text");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CategoryID");

                    b.ToTable("DoctorCategories");
                });

            modelBuilder.Entity("HealthcareBookings.Domain.Entities.FavoriteClinics", b =>
                {
                    b.Property<string>("PatientID")
                        .HasColumnType("text");

                    b.Property<string>("ClinicID")
                        .HasColumnType("text");

                    b.HasKey("PatientID", "ClinicID");

                    b.HasIndex("ClinicID");

                    b.ToTable("FavoriteClinics");
                });

            modelBuilder.Entity("HealthcareBookings.Domain.Entities.FavoriteDoctors", b =>
                {
                    b.Property<string>("PatientID")
                        .HasColumnType("text");

                    b.Property<string>("DoctorID")
                        .HasColumnType("text");

                    b.HasKey("PatientID", "DoctorID");

                    b.HasIndex("DoctorID");

                    b.ToTable("FavoriteDoctors");
                });

            modelBuilder.Entity("HealthcareBookings.Domain.Entities.Patient", b =>
                {
                    b.Property<string>("PatientUID")
                        .HasColumnType("text");

                    b.Property<string>("PatientUserId")
                        .HasColumnType("text");

                    b.HasKey("PatientUID");

                    b.HasIndex("PatientUserId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("HealthcareBookings.Domain.Entities.PatientLocation", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<string>("PatientUID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("PatientUID");

                    b.ToTable("PatientLocation");
                });

            modelBuilder.Entity("HealthcareBookings.Domain.Entities.ProfileInformation", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("text");

                    b.Property<DateOnly>("DOB")
                        .HasColumnType("date");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserID");

                    b.ToTable("ProfileInformation");
                });

            modelBuilder.Entity("HealthcareBookings.Domain.Entities.Schedule", b =>
                {
                    b.Property<string>("ScheduleID")
                        .HasColumnType("text");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("DoctorID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.HasKey("ScheduleID");

                    b.HasAlternateKey("DoctorID", "Date");

                    b.ToTable("DoctorSchedules");
                });

            modelBuilder.Entity("HealthcareBookings.Domain.Entities.TimeSlot", b =>
                {
                    b.Property<string>("SlotID")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ScheduleID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SlotID");

                    b.HasAlternateKey("ScheduleID", "StartTime", "EndTime");

                    b.ToTable("DoctorTimeSlots");
                });

            modelBuilder.Entity("HealthcareBookings.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HealthcareBookings.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("HealthcareBookings.Domain.Entities.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthcareBookings.Domain.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthcareBookings.Domain.Entities.TimeSlot", "TimeSlot")
                        .WithOne()
                        .HasForeignKey("HealthcareBookings.Domain.Entities.Appointment", "TimeSlotID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("HealthcareBookings.Domain.Entities.AppointmentReview", b =>
                {
                    b.HasOne("HealthcareBookings.Domain.Entities.Appointment", null)
                        .WithOne("Review")
                        .HasForeignKey("HealthcareBookings.Domain.Entities.AppointmentReview", "AppointmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthcareBookings.Domain.Entities.Clinic", b =>
                {
                    b.OwnsOne("HealthcareBookings.Domain.Entities.Location", "Location", b1 =>
                        {
                            b1.Property<string>("ClinicID")
                                .HasColumnType("text");

                            b1.Property<string>("AddressText")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<float>("Latitude")
                                .HasColumnType("real");

                            b1.Property<float>("Longitude")
                                .HasColumnType("real");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("StreetName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("StreetNumber")
                                .HasColumnType("integer");

                            b1.HasKey("ClinicID");

                            b1.ToTable("Clinic");

                            b1.WithOwner()
                                .HasForeignKey("ClinicID");
                        });

                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("HealthcareBookings.Domain.Entities.ClinicAdmin", b =>
                {
                    b.HasOne("HealthcareBookings.Domain.Entities.User", "AdminUser")
                        .WithMany()
                        .HasForeignKey("AdminUserId");

                    b.HasOne("HealthcareBookings.Domain.Entities.User", null)
                        .WithOne("ClinicAdminProperties")
                        .HasForeignKey("HealthcareBookings.Domain.Entities.ClinicAdmin", "ClinicAdminUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthcareBookings.Domain.Entities.Clinic", "Clinic")
                        .WithOne("ClinicAdmin")
                        .HasForeignKey("HealthcareBookings.Domain.Entities.ClinicAdmin", "ClinicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdminUser");

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("HealthcareBookings.Domain.Entities.Doctor", b =>
                {
                    b.HasOne("HealthcareBookings.Domain.Entities.DoctorCategory", "Category")
                        .WithMany("Doctors")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthcareBookings.Domain.Entities.Clinic", "Clinic")
                        .WithMany("Doctors")
                        .HasForeignKey("ClinicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthcareBookings.Domain.Entities.User", null)
                        .WithOne("DoctorProperties")
                        .HasForeignKey("HealthcareBookings.Domain.Entities.Doctor", "DoctorUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthcareBookings.Domain.Entities.User", "DoctorUser")
                        .WithMany()
                        .HasForeignKey("DoctorUserId");

                    b.Navigation("Category");

                    b.Navigation("Clinic");

                    b.Navigation("DoctorUser");
                });

            modelBuilder.Entity("HealthcareBookings.Domain.Entities.FavoriteClinics", b =>
                {
                    b.HasOne("HealthcareBookings.Domain.Entities.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthcareBookings.Domain.Entities.Patient", "Patient")
                        .WithMany("FavoriteClinics")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthcareBookings.Domain.Entities.FavoriteDoctors", b =>
                {
                    b.HasOne("HealthcareBookings.Domain.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthcareBookings.Domain.Entities.Patient", "Patient")
                        .WithMany("FavoriteDoctors")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthcareBookings.Domain.Entities.Patient", b =>
                {
                    b.HasOne("HealthcareBookings.Domain.Entities.User", null)
                        .WithOne("PatientProperties")
                        .HasForeignKey("HealthcareBookings.Domain.Entities.Patient", "PatientUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthcareBookings.Domain.Entities.User", "PatientUser")
                        .WithMany()
                        .HasForeignKey("PatientUserId");

                    b.Navigation("PatientUser");
                });

            modelBuilder.Entity("HealthcareBookings.Domain.Entities.PatientLocation", b =>
                {
                    b.HasOne("HealthcareBookings.Domain.Entities.Patient", null)
                        .WithMany("Locations")
                        .HasForeignKey("PatientUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HealthcareBookings.Domain.Entities.Location", "Location", b1 =>
                        {
                            b1.Property<string>("PatientLocationID")
                                .HasColumnType("text");

                            b1.Property<string>("AddressText")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<float>("Latitude")
                                .HasColumnType("real");

                            b1.Property<float>("Longitude")
                                .HasColumnType("real");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("StreetName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("StreetNumber")
                                .HasColumnType("integer");

                            b1.HasKey("PatientLocationID");

                            b1.ToTable("PatientLocation");

                            b1.WithOwner()
                                .HasForeignKey("PatientLocationID");
                        });

                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("HealthcareBookings.Domain.Entities.ProfileInformation", b =>
                {
                    b.HasOne("HealthcareBookings.Domain.Entities.User", null)
                        .WithOne("Profile")
                        .HasForeignKey("HealthcareBookings.Domain.Entities.ProfileInformation", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthcareBookings.Domain.Entities.Schedule", b =>
                {
                    b.HasOne("HealthcareBookings.Domain.Entities.Doctor", "Doctor")
                        .WithMany("Schedules")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HealthcareBookings.Domain.Entities.TimeSlot", b =>
                {
                    b.HasOne("HealthcareBookings.Domain.Entities.Schedule", "Schedule")
                        .WithMany("TimeSlots")
                        .HasForeignKey("ScheduleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HealthcareBookings.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HealthcareBookings.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthcareBookings.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HealthcareBookings.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthcareBookings.Domain.Entities.Appointment", b =>
                {
                    b.Navigation("Review")
                        .IsRequired();
                });

            modelBuilder.Entity("HealthcareBookings.Domain.Entities.Clinic", b =>
                {
                    b.Navigation("ClinicAdmin")
                        .IsRequired();

                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("HealthcareBookings.Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("HealthcareBookings.Domain.Entities.DoctorCategory", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("HealthcareBookings.Domain.Entities.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("FavoriteClinics");

                    b.Navigation("FavoriteDoctors");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("HealthcareBookings.Domain.Entities.Schedule", b =>
                {
                    b.Navigation("TimeSlots");
                });

            modelBuilder.Entity("HealthcareBookings.Domain.Entities.User", b =>
                {
                    b.Navigation("ClinicAdminProperties")
                        .IsRequired();

                    b.Navigation("DoctorProperties")
                        .IsRequired();

                    b.Navigation("PatientProperties")
                        .IsRequired();

                    b.Navigation("Profile");
                });
#pragma warning restore 612, 618
        }
    }
}
